{"pages":[],"posts":[{"title":"ECS七天训练营 Day2","text":"Day 2 搭建wiki知识库 运行环境：LAMP运行环境（php版本必须在5.5以上） 安装MediaWiki连接主机，进入/data/wwwroot/default/目录 123456mkdir old ##新建文件夹cd old/wget https://releases.wikimedia.org/mediawiki/1.29/mediawiki-1.29.1.tar.gz ##下载mediawikitar -zxvf mediawiki-1.29.1.tar.gz ##解压文件mv ./mediawiki-1.29.1/* /data/wwwroot/default/ ##移动文件chown -R www /data/wwwroot/default 访问公网ip下的index.php，可以正常访问 配置MediaWiki 访问 http://ecs公网IP，页面如下图所示，点击 【set up the wiki】 一般情况下会根据系统语言自动设置为简体中文，如果没有就自行设置一下。 数据库选择 SQLite。 输入wiki名称和管理员账户。 可以选择【我已经不耐烦了，赶紧安装我的wiki】加快安装速度。 下载配置文件。 将下载的 LocalSettings.php 文件上传到根目录。 重新访问http://ecs公网ip，就可以访问wiki系统了。 MediaWiki安装完成，接下来就可以创建自己的页面了。","link":"/2020/08/07/ECS%E4%B8%83%E5%A4%A9%E8%AE%AD%E7%BB%83%E8%90%A5%20Day2/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/05/13/hello-world/"},{"title":"ECS七天训练营 Day1","text":"Day 1 打造专属云笔记安装Node.js 下载Node.js 13.9.0 64位安装包1wget https://npm.taobao.org/mirrors/node/v13.9.0/node-v13.9.0-linux-x64.tar.xz 创建Node.js安装⽬录1sudo mkdir -p /usr/local/lib/nodejs 解压到要安装⽬录1sudo tar -xJvf node-v13.9.0-linux-x64.tar.xz -C /usr/local/lib/nodejs 使⽤查看node.js版本号命令验证是否解压成功12cd /usr/local/lib/nodejs/node-v13.9.0-linux-x64/bin ##切换到安装文件夹./node -v 截图如下： ⾄此，nodejs安装完毕。 安装 VuePress 全局安装12npm config set registry https://registry.npm.taobao.org ##淘宝镜像加快安装速度npm install -g vuepress 创建⼀个⽂件夹作为⽬录12mkdir try_blogscd try_blogs 项⽬初始化1npm init -y 初始化后会⽣成⼀个package.json⽂件之后进⼊配置步骤。 配置 VuePress 设置package.json的脚本配置 1vim package.json 修改scripts中的内容如下：1234\"scripts\": { \"docs:dev\": \"vuepress dev docs\", \"docs:build\": \"vuepress build docs\"}, 截图如下： 在当前⽬录中创建⼀个⽂档⽬录1mkdir docs 创建.vuepress⽬录12cd docsmkdir .vuepress 新建⼀个md⽂件1echo '# Hello VuePress - first blog!' &gt;README.md 创建config.js配置⽂件12cd .vuepressecho &gt;config.js 创建public⽬录1mkdir public 完成后的⼯作⽬录如下：1234567try_blogs├─ docs //以后要在这⾥⾯写⽂章，直接在此⽂件夹下新建⽂件夹，然后再建md⽂档就⾏，链接会⾃动⽣成│ ├─ README.md // 这个将会是我们以后的⾸页│ └─ .vuepress // 这个⾥⾯会存放⼀些配置和组件│ └─ public // 静态⽂件存放地│ └─ config.js //配置⽂件，以后的所有配置基本都在这⾥写└─ package.json 回到try_blogs⽬录，执⾏命令1vuepress dev docs 12345注：VuePress中有两个命令:vuepress dev docs 命令运⾏本地服务，通过访问(http://localhost:8080)即可预览⽹站vuepress build docs 命令⽤来⽣成静态⽂件， 默认情况下， 放置在docs/.vuepress/dist⽬录中，当然你也可以在docs/.vuepress/config.js中的dest字段来修改默认存放⽬录。在这⾥将两个命令封装成脚本的⽅式，直接使⽤npm run docs:dev和npm run docs:build即可。 在浏览器中运⾏： http://ECS公⽹IP:8080 修改⾸页配置修改README.md⽂件，将原来的内容删除后，将以下内容拷贝进去1234567891011121314151617---home: trueheroText: Vue技术博客初试tagline: 项⽬目结构，关注讨论，每⽇日分享actionText: 每⽇日更更新 →actionLink: /testlink/features:- title: 项⽬目结构details: 以 Markdown 为中⼼心的项⽬目结构，以最少的配置帮助你专注于写作。- title: 关注讨论details: 享受 Vue + webpack 的开发体验，在 Markdown 中使⽤用 Vue 组件，同时可以使⽤用 Vue 来开发⾃自定义主题。- title: 每⽇日分享details: VuePress 为每个⻚页⾯面预渲染⽣生成静态的 HTML，同时在⻚页⾯面被加载的时候，将作为 SPA 运⾏行行。footer: LearnVueonECS Licensed | Copyright © 2020-present--- 浏览器刷新后显⽰效果如下图： ⾄此，完成了VuePress在阿⾥云ECS上的搭建和初步配置，更多VuePress的使⽤⽂档可参考VuePress官⽹。","link":"/2020/08/06/ECS%E4%B8%83%E5%A4%A9%E8%AE%AD%E7%BB%83%E8%90%A5%20Day1/"},{"title":"树莓派固定IP设置","text":"将树莓派插在路由器上，在将树莓派IP设置为静态IP就可以方便的连接树莓派了。 系统环境：Ubuntu 18.04Raspberry Pi 4(arm64)netplan树莓派与电脑有线连接 快速开始修改网卡信息配置配置文件名称可能为50-cloud-init.yaml，也可能是01-network-card.yaml不知道具体哪个/etc/netplan内查看 1$ sudo nano /etc/netplan/50-cloud-init.yaml 打开配置文件，WiFi连接在wlan0里修改，网线连接在eth0里修改需要修改或添加的内容 12345dhcp4: false addresses: [192.168.1.200/24] gateway4: 192.168.1.1 nameservers: addresses: [192.168.1.1] WiFi连接修改完成如下 1234567891011121314151617#不可以用Tab代替空格network: ethernets: eth0: dhcp4: true optional: true version: 2 wifis: wlan0: #修改为无线网卡名称 dhcp4: false addresses: [192.168.1.200/24] gateway4: 192.168.1.1 nameservers: addresses: [8.8.8.8, 192.168.1.1] access-points: \"SSID NAME\": password: \"SSID PASSWORD\" 检查错误与更新网络设置123$ sudo netplan --debug try$ sudo netplan --debug generate$ sudo netplan --debug apply 自动断开ssh连接后，重新输入树莓派IP192.168.1.200连接树莓派 1$ ifconfig -a 123456eth0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt; mtu 1500lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt; mtu 65536wlan0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 192.168.1.200 netmask 255.255.255.0 broadcast 192.168.1.255 END树莓派固定IP设置 参考Ubuntu 18.04 LTS设置固定ip OTHERS树莓派WIFI设置","link":"/2020/07/24/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%9B%BA%E5%AE%9AIP%E8%AE%BE%E7%BD%AE/"},{"title":"树莓派WIFI设置","text":"配置树莓派的WiFi，允许树莓派放在角落里，而不是必须和路由器绑定在一起。 系统环境：Ubuntu 18.04Raspberry Pi 4(arm64)netplan树莓派与电脑有线连接 快速开始更新软件信息网络没设置好，也可以不更新 1$ sudo apt update 查看无线网卡名称1$ ifconfig -a 12345eth0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt; mtu 1500lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt; mtu 65536wlan0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 无线网卡名称为wlan0 设置WIFI配置文件名称可能为50-cloud-init.yaml，也可能是01-network-card.yaml不知道具体哪个/etc/netplan内查看 1$ sudo nano /etc/netplan/50-cloud-init.yaml 打开配置文件 123456network: ethernets: eth0: dhcp4: true optional: true version: 2 添加以下内容 1234567##不可以用Tab代替空格 wifis: wlan0: #修改为无线网卡名称 dhcp4: true access-points: \"SSID NAME\": password: \"SSID PASSWORD\" 检查错误与更新网络设置123$ sudo netplan --debug try$ sudo netplan --debug generate$ sudo netplan --debug apply 1$ ifconfig -a 123456eth0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt; mtu 1500lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt; mtu 65536wlan0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 192.168.1.105 netmask 255.255.255.0 broadcast 192.168.1.255 获取ip地址，拔掉网线用新IP地址连接树莓派 END树莓派WIFI设置 参考Connect raspberry pi 4 with ubuntu server to wifiUbuntu Server 18.04配置无线Wifi网卡","link":"/2020/07/24/%E6%A0%91%E8%8E%93%E6%B4%BEWIFI%E8%AE%BE%E7%BD%AE/"},{"title":"ECS七天训练营 Day3","text":"Day 3 基于云服务器构建微信公众号管理系统 运行环境：LAMP环境（Ubuntu16.04 Apache PHP7.1）购买连接 环境配置与微擎安装 登录服务器 输入代码 然后按回车下一步 1yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh 9b4e0b47 您想现在安装bt面板到www目录吗？ 输入y 然后按回车下一步 安装宝塔完毕，服务器会提示宝塔面板的管理登录地址，账号密码（用电脑的浏览器访问登录） 登录宝塔面板,和图片一样选，然后等候一小时左右即可安装完毕，可以宝塔后台的左上角看到任务安装列表 第4步安装完成后才能部署，不然无法部署 下载安装包，http://cdn.w7.cc/download/WeEngine-Laster-Online.zip解压出一个php文件，点击网站目录上传此文件。 访问 你的域名/install.php 安装，这里是s.w7.cc的账户，没有就去注册 如果弹出这个 请参考此教程 编辑PHP.INI 找到;always_populate_raw_post_data = -1 去掉前面的分号;如果=号后面是on ，改成-1 保存,重启php 弹出的内容对应填写 设置此后台的账户密码 ，安装成功 公众号添加与管理 更新一下系统，及时更新系统可以避免一些错误 添加需要管理的微信公众号 选择【手动添加公众号】 根据页面要求填写内容 可以在微信公众号后台的这两个部分中查找所需要的信息。 有一步需要在微信公众号的后台添加开发者信息，将系统给出的 Token和 Key 复制到【基本配置】中即可 这样就添加好公众号了，接下来我们测试一下公众号应用。6. 进入【应用市场】，挑选一款适合自己的公众号应用 回到网站，进入【未安装公众号应用】，安装一下刚刚购买的应用 返回添加好的公众号，就可以看到刚刚安装好的应用了 点击一个应用就可以进行设置或者扫二维码使用了","link":"/2020/08/08/ECS%E4%B8%83%E5%A4%A9%E8%AE%AD%E7%BB%83%E8%90%A5%20Day3/"},{"title":"ECS七天训练营 Day4","text":"Day 4 基于Aria2与Filemanager部署离线下载服务器 运行环境： 支持的操作系统：CentOS 7-8、Debian 8-10、Ubuntu 16-18 操作系统要求64位 远程管理软件说明与代码编辑器管理终端管理我们的服务器我们需要通过相关软件，针对Linux服务器的管理，这⾥推荐使⽤ Putty。PuTTY 是⾃由的跨平台 Telnet/SSH 客户端，同时在 Win32 和 Unix 系统下模拟 xterm 终端。其主要作者是 Simon Tatham。由 Larry Li维护并开源的中⽂版：下载地址：https://github.com/larryli/PuTTY/releases ⽂件传输推荐 Filezilla 通过 SFTP 协议进⾏本地和服务器的⽂件传输和管理。下载地址：https://filezilla-project.org/download.php?type=client 代码编辑可视化的 Visual Studio Code，可以更⾼效的进⾏代码编辑和管理。下载地址：https://code.visualstudio.com/Download CCAA安装CCAA原为CentOS + Caddy + AriaNg + Aria2，故命名为CCAA，不过现在已经不仅仅支持CentOS，包括主流的Debian、Ubuntu也已经支持，自2.0(2020/02/28)版本开始已移除Caddy，改用Golang写了一个简单的WebServer来运行AriaNg。作者博客 and Github 主要功能 支持HTTP/HTTPS/FTP/BT/磁力链接等离线下载，断点续传等 文件管理、视频在线播放 完善的帮助文档 一键安装脚本（使用root用户）：1234#海外bash &lt;(curl -Lsk https://raw.githubusercontent.com/helloxz/ccaa/master/ccaa.sh)#国内bash &lt;(curl -Lsk https://raw.githubusercontent.com/helloxz/ccaa/master/ccaa.sh) cdn 如果出现-bash: curl: command not found错误，说明curl命令没安装，请输入下面的命令先安装curl，再回过头来执行上面的命令再来一次。 1234#Debian or Ubuntuapt-get -y install curl#CentOSyum -y install curl 如果不出现错误，会看到下面的界面，根据提示输入1安装CCAA 安装过程中会要求设置下载路径（若不填写默认下载路径为/data/ccaaDown）和Aria2 RPC 密钥，密钥建议字母 + 数字组合，不要含有特殊字符，以免出现异常。 安装完毕后会提示访问地址、Aria2 RPC 密钥、File Browser 用户名、密码 访问地址默认为http://IP:6080 Aria2 RPC 密钥:您自行设置的 File Browser 用户名：默认为ccaa File Browser 密码：默认为admin Docker安装12345docker run --name=\"ccaa\" -d -p 6080:6080 -p 6081:6081 -p 6800:6800 -p 51413:51413 \\ -v /data/ccaaDown:/data/ccaaDown \\ -e PASS=\"xiaoz.me\" \\ helloz/ccaa \\ sh -c \"dccaa pass &amp;&amp; dccaa start\" 第一个/data/ccaaDown为本地目录，CCAA下载后的内容会保存在此目录，请根据自身情况设置 xiaoz.me为Aria2密钥，运行的时候请修改为自己的密码 文件管理默认用户名为ccaa，密码为admin，登录后可在后台修改 使用入门输入http://IP:6080访问AriaNg ，首次打开会提示“认证失败”，这个是正常现象。依次点击“AriaNg设置 - RPC - 填写您之前设置的RPC密钥” 左侧导航栏有一个“文件管理”菜单，是FileBrowser的入口地址，URL地址为http://IP:6081，初始用户名为：ccaa，密码为：admin，登录FileBrowser后请务必修改密码。 常用命令123456ccaa ##进入CCAA操作界面ccaa status ##查看CCAA运行状态ccaa stop ##停止CCAAccaa start ##启动CCAAccaa restart ##重启CCAAccaa -v ##查看CCAA版本（2.0开始支持） 注意事项 CCAA是从Github拉取资源，建议国外服务器使用，国内服务器可能安装速度非常缓慢或不成功 如果服务器有启用安全组，请务必在安全组放行以下端口：6080/6081/6800/6998/51413 大部分服务商是禁止下载BT的，若因违规使用导致服务器被封本人不承担任何责任 其它更多使用说明请参考帮助文档，在提出疑问之前建议先阅读一遍帮助文档，如果有什么建议或者问题欢迎留言反馈。 CCAA项目地址：https://github.com/helloxz/ccaa 帮助文档：https://www.yuque.com/helloz/ccaa","link":"/2020/08/09/ECS%E4%B8%83%E5%A4%A9%E8%AE%AD%E7%BB%83%E8%90%A5%20Day4/"},{"title":"ECS七天训练营 Day5","text":"Day 5 搭建Java Web开发环境 运行环境： 支持的操作系统：CentOS 7.6 安装JDK 执行以下命令，查看yum源中JDK版本。1yum list java* 执行以下命令，使用yum安装JDK1.8。1yum -y install java-1.8.0-openjdk* 执行以下命令，查看是否安装成功。1java -version 如果显示如下图内容，则表示JDK安装成功。 安装MySQL数据库 执行以下命令，下载并安装MySQL官方的Yum Repository。 123wget http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpmyum -y install mysql57-community-release-el7-10.noarch.rpmyum -y install mysql-community-server 执行以下命令，启动 MySQL 数据库。 1systemctl start mysqld.service 执行以下命令，查看MySQL初始密码。 1grep \"password\" /var/log/mysqld.log 执行以下命令，登录数据库。 1mysql -uroot -p 执行以下命令，修改MySQL默认密码。 12set global validate_password_policy=0; #修改密码安全策略为低（只校验密码长度，至少8位）。ALTER USER 'root'@'localhost' IDENTIFIED BY '12345678'; 执行以下命令，授予root用户远程管理权限。 安装Tomcat 执行以下命令，下载Tomcat压缩包。 1wget https://mirror.bit.edu.cn/apache/tomcat/tomcat-8/v8.5.57/bin/apache-tomcat-8.5.57.tar.gz 执行以下命令，解压刚刚下载Tomcat包。 1tar -zxvf apache-tomcat-8.5.57.tar.gz 执行以下命令，修改Tomcat名字。 1mv apache-tomcat-8.5.57 /usr/local/Tomcat8.5 执行以下命令，为Tomcat授权。 1chmod +x /usr/local/Tomcat8.5/bin/*.sh 执行以下命令，修改Tomcat默认端口号为80。 说明：Tomcat默认端口号为8080。1sed -i 's/Connector port=\"8080\"/Connector port=\"80\"/' /usr/local/Tomcat8.5/conf/server.xml 启动Tomcat。1/usr/local/Tomcat8.5/bin/./startup.sh 访问Tomcat 打开浏览器，在地址栏中输入ECS公网地址，例如：139.0.0.1如果显示如下界面，则表示Tomcat安装配置成功。 至此，Java Web开发环境搭建完成。","link":"/2020/08/10/ECS%E4%B8%83%E5%A4%A9%E8%AE%AD%E7%BB%83%E8%90%A5%20Day5/"},{"title":"树莓派Ubuntu换国内源","text":"由于树莓派为arm64构架，即使安装了Ubuntu也不能用Ubuntu的源，需要选择arm64可用的源。 系统环境：Ubuntu 18.04Raspberry Pi 4(arm64) 快速开始树莓派Ubuntu系统换阿里云源 备份原文件 1sudo mv /etc/apt/sources.list /etc/apt/sources.list.bk 创建新文件 1sudo vi /etc/apt/sources.list 粘贴以下内容，更换源为阿里云源 1234567891011121314deb https://mirrors.aliyun.com/ubuntu-ports/ bionic main restricted universe multiversedeb-src https://mirrors.aliyun.com/ubuntu-ports/ bionic main restricted universe multiversedeb https://mirrors.aliyun.com/ubuntu-ports/ bionic-security main restricted universe multiversedeb-src https://mirrors.aliyun.com/ubuntu-ports/ bionic-security main restricted universe multiversedeb https://mirrors.aliyun.com/ubuntu-ports/ bionic-updates main restricted universe multiversedeb-src https://mirrors.aliyun.com/ubuntu-ports/ bionic-updates main restricted universe multiversedeb https://mirrors.aliyun.com/ubuntu-ports/ bionic-proposed main restricted universe multiversedeb-src https://mirrors.aliyun.com/ubuntu-ports/ bionic-proposed main restricted universe multiversedeb https://mirrors.aliyun.com/ubuntu-ports/ bionic-backports main restricted universe multiversedeb-src https://mirrors.aliyun.com/ubuntu-ports/ bionic-backports main restricted universe multiverse 保存更新 注意：同时按下 Shift 与 : 后光标跳到左下角，然后输入 wq ，按下回车保存文件 1sudo apt-get update ##更新源 END树莓派Ubuntu换国内源","link":"/2020/08/12/%E6%A0%91%E8%8E%93%E6%B4%BEUbuntu%E6%8D%A2%E5%9B%BD%E5%86%85%E6%BA%90/"},{"title":"树莓派Ubuntu系统docker安装与换源","text":"树莓派4B为arm64架构，虽然安装了Ubuntu系统，但是与正常服务器上的Ubuntu有所不同，配置时候需要选择标注arm64构架的源。 系统环境：Ubuntu 18.04Raspberry Pi 4(arm64) 快速开始添加国内源加快安装 备份原文件 1sudo cp /etc/apt/sources.list /etc/apt/sources.list.bk 用阿里云镜像加速docker下载 打开文件 1sudo vi /etc/apt/sources.list 添加以下内容 12deb [arch=arm64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu bionic stable#deb-src [arch=arm64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu bionic stable 更新源 1sudo apt-get update ##更新源 docker安装 卸载旧版本 1sudo apt-get remove docker docker-engine docker.io containerd runc 安装 HTTPS 所依赖的包(不知道是不是必要?) 123sudo apt-get install apt-transport-https \\ ca-certificates \\ software-properties-common 添加 Docker 的 GPG key 1curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - 验证 key id: 1sudo apt-key fingerprint 0EBFCD88 官方给出的指纹为：9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 安装docker 1sudo apt-get install docker-ce 查看docker安装版本以下信息为root权限下查看 12345678910111213141516171819202122232425262728root@ubuntu:~# docker versionClient: Docker Engine - Community Version: 19.03.12 API version: 1.40 Go version: go1.13.10 Git commit: 48a6621 Built: Mon Jun 22 15:46:22 2020 OS/Arch: linux/arm64 Experimental: falseServer: Docker Engine - Community Engine: Version: 19.03.12 API version: 1.40 (minimum version 1.12) Go version: go1.13.10 Git commit: 48a6621 Built: Mon Jun 22 15:44:54 2020 OS/Arch: linux/arm64 Experimental: false containerd: Version: 1.2.13 GitCommit: 7ad184331fa3e55e52b890ea95e65ba581ae3429 runc: Version: 1.0.0-rc10 GitCommit: dc9208a3303feef5b3839f4323d9beb36df0a9dd docker-init: Version: 0.18.0 GitCommit: fec3683 docker换源加快下载速度 申请容器镜像服务阿里云容器镜像服务 获取加速器地址 配置镜像加速器修改daemon配置文件/etc/docker/daemon.json来使用加速器使用命令sudo nano /etc/docker/daemon.json修改文件，替换为以下内容 123{ \"registry-mirrors\": [\"替换为自己的加速器地址\"]} 12sudo systemctl daemon-reload ##重载配置sudo systemctl restart docker ##重启docker 获取一下测试镜像 1sudo docker pull hello-world 1sudo docker run hello-world 12345678910111213141516171819202122root@ubuntu:~# docker run hello-worldHello from Docker!This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub. (arm64v8) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal.To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bashShare images, automate workflows, and more with a free Docker ID: https://hub.docker.com/For more examples and ideas, visit: https://docs.docker.com/get-started/ 常用命令 123456789101112131415161718docker run -i -t &lt;image_name/continar_id&gt; /bin/bash ##启动容器并启动bash（交互方式） docker run -d -it image_name ##启动容器以后台方式运行(更通用的方式）docker stop &lt;image_name/continar_id&gt; ##关闭运行中的容器docker start &lt;image_name/continar_id&gt; ##启动一个已经停止的容器docker restart &lt;image_name/continar_id&gt; ##重启一个容器docker ps -a ##显示全部容器docker images ##查看本地镜像docker rm &lt;image_name/continar_id&gt; ##删除容器docker rm $(docker ps -a) ##删除所有容器 END树莓派Ubuntu系统docker安装与换源","link":"/2020/08/14/%E6%A0%91%E8%8E%93%E6%B4%BEUbuntu%E7%B3%BB%E7%BB%9Fdocker%E5%AE%89%E8%A3%85%E4%B8%8E%E6%8D%A2%E6%BA%90/"},{"title":"树莓派安装openwrt","text":"为了不浪费树莓派的性能，通过docker将openwrt安装在树莓派上。 系统环境：Ubuntu 18.04Raspberry Pi 4(arm64)Docker 快速开始注意： 设备已经安装docker并且设置好docker镜像加速器 以下操作在root权限下进行 1.配置网络环境 开启网卡混杂模式1ip link set eth0 promisc on 创建 macvlan 网络1docker network create -d macvlan --subnet=192.168.1.0/24 --gateway=192.168.1.1 -o parent=eth0 macnet 其中192.168.1.0和192.168.1.1根据具体网络环境配置，可以通过ifconfig来查看树莓派所处的网络环境123eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 192.168.1.201 netmask 255.255.255.0 broadcast 192.168.1.255 inet6 fe80::dea6:32ff:fe83:3e prefixlen 64 scopeid 0x20&lt;link&gt; 其中IP地址为192.168.1.x，那么填写--subnet=192.168.1.0/24 --gateway=192.168.1.1， 如果IP地址为192.168.123.x，那么填写--subnet=192.168.123.0/24 --gateway=192.168.123.1 检查当前网络状况 创建完成以后可以使用docker network ls，查看当前主机的网络环境，其中出现了macvlan网络macnet表示配置完成 123456root@ubuntu:~# docker network lsNETWORK ID NAME DRIVER SCOPE5941050d5845 bridge bridge local3c6ed18d1956 host host local6ae2ee10d0ac macnet macvlan local98f98b66a75d none null local 2.拉取镜像并创建容器之前已经配置了docker镜像加速，所以我们直接从dockerhub上拉取镜像。镜像作者为：scenerycmopenDock­er­hub 地址：https://hub.docker.com/u/scenerycmopen 1docker pull scenerycm/openwrt:19.07 如果发现网络速度很慢或者出现错误，请配置docker镜像加速，不然会耗费大量时间 输入docker images查看镜像列表 1234root@ubuntu:~# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEscenerycm/openwrt 19.07 6ad868027483 3 months ago 596MBhello-world latest a29f45ccde2a 7 months ago 9.14kB 接下来创建容器 1docker run --restart unless-stopped --name openwrt -d --network macnet --privileged scenerycm/openwrt /sbin/init 其中：--restart unless-stopped表示除非手动停止，不然容器会自动重启；--name openwrt定义容器名称为openwrt；--network macnet表示将容器加入到macnet网络环境；--privileged表示容器在特权模式下运行；scenerycm/openwrt指代镜像列表里的REPOSITORY名称；/sbin/init定义容器启动后执行的命令。 可以用docker ps -a来查看当前运行的容器： 123root@ubuntu:~# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES9b8bb439d2eb scenerycm/openwrt:19.07 &quot;/sbin/init&quot; 4 days ago Up 7 seconds openwrt 注意： 12docker stop openwrt ##关闭容器docker start openwrt ##启动镜像 3.修改OpenWrt容器相关配置 进入容器 1docker exec -it openwrt bash ##openwrt表示容器名称 配置网络 1nano /etc/config/network 修改Lan设置： 12345678910config interface 'lan' option type 'bridge' option ifname 'eth0' option proto 'static' option ipaddr '192.168.1.222' option netmask '255.255.255.0' option ip6assign '60' option gateway '192.168.1.1' option broadcast '192.168.1.255' option dns '192.168.1.222' 其中：option ipaddr改为和树莓派同一网段，我树莓派IP地址为192.168.1.201，这里全设置成192.168.1.x 重启容器内部网络服务 1/etc/init.d/network restart 进入控制面板在浏览器中输入上面option ipaddr设置的IP地址，访问openwrt控制面板用户名：root密码：password 关闭DHCP服务在 “网络 - 接口 - Lan - 修改” 界面中，勾选下方的 “忽略此接口（不在此接口提供 DHCP 服务）”，并“保存&amp;应用”。 进行网络测试在 “网络 - 诊断” 界面中输入baidu.com 注意：出现bad address表示DNS设置错误，请检查配置文件/etc/resolv.conf，在其中添加nameserver 127.0.0.1 4.OpenWrt使用 方案一：在配置主路由在主路由Lan口设置里，将默认网关和-DNS服务器1-更改为openwrt的IP地址，即option ipaddr设置的IP地址。 方案二：手动更改设备网关地址 手机上也可以通过手动更改网关地址来使用openwrt 参考树莓派 | Docker上运行 OpenWrt 做旁路由，超简单！在Docker 中运行 OpenWrt 旁路网关 END","link":"/2020/08/15/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85openwrt/"}],"tags":[{"name":"Aliyun","slug":"Aliyun","link":"/tags/Aliyun/"},{"name":"ECS七天训练营","slug":"ECS七天训练营","link":"/tags/ECS%E4%B8%83%E5%A4%A9%E8%AE%AD%E7%BB%83%E8%90%A5/"},{"name":"Raspberry Pi 4","slug":"Raspberry-Pi-4","link":"/tags/Raspberry-Pi-4/"},{"name":"Ubuntu 18.04","slug":"Ubuntu-18-04","link":"/tags/Ubuntu-18-04/"}],"categories":[{"name":"2020年8月","slug":"2020年8月","link":"/categories/2020%E5%B9%B48%E6%9C%88/"},{"name":"2020年7月","slug":"2020年7月","link":"/categories/2020%E5%B9%B47%E6%9C%88/"}]}